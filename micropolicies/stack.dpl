module stack:

type:
    data Depth = Int (20) // this means max depth is 20 (I think!)

metadata:
    Stack Depth,  // For memory cells that are part of the stack
    PC Depth,
    Instr, 
    SP,           // stack pointer register
    Call,         //
    H1,           // header seq
    H2,
//  H3,
    R1,           // return seq
    R2,
    R3

// ==============================================================================
// ==============================================================================
policy: main =

// ------------------------------------------------------------------------------
// HEADER SEQUENCE

jalGrp (
       env == {(PC old)}, code == {Instr, Call}
    -> env = {(PC new),H1}, return = {(PC old)} )

// TODO:
// val, mem used to be Stack old. Should it be PC?
// Old mistake? code was not tagged H1. HOW would we find that?
^ storeGrp(
       env == [+H1], addr == {SP}, val == {(PC old)}, mem == _, code == {Instr, H1}
    -> env = env[-H1,+H2], mem = {(PC old)})

^ immArithGrp(
     env == [+H2], op1 == {SP}, code == {Instr, H2}
  -> env = env[-H2], res = {SP})

//^ immArithGrp(
//     env == [+H3], op1 == _, code == {Instr, H3}
//  -> env = env[-H3], res = {})

// ------------------------------------------------------------------------------
// RETURN SEQUENCE

^ loadGrp(
       addr == {SP}, mem == {(PC _)}, env == _, code == {Instr, R1}
    -> env = env[+R2], res = mem)

^ immArithGrp(
     env == [+R2], op1 == {SP}, code == {Instr, R2}
  -> env = env[-R2,+R3], res = {SP})

^ jalrGrp(
       target == {(PC old)}, env == {R3,(PC _)}, code == {Instr, R3}
    -> env = {(PC old)}, return = {} )

// ------------------------------------------------------------------------------
// OTHER INSTRUCTIONS

//TODO: Add code {Instr} to each rule
^ arithGrp(
       code == {Instr}, env == _, op1 == [-SP], op2 == [-SP] //, res == {} (no can do)
    -> env = env, res = {} )
^ immArithGrp(
       code == {Instr}, env == _, op1 == [-SP] //, res == [-SP]
    -> env = env, res = {})
#ifndef LOAD_NO_CHECK_STACK_DEPTH
^ loadGrp(
       code == {Instr}, env == {PC pcdepth}, addr == _, mem == {Stack memdepth} | pcdepth <= memdepth 
    -> env = env, res = {})
#else
// Not Checking stack depths
^ loadGrp(
       code == {Instr}, env == _, addr == _, mem == _ // TODO: What was res as an input?
    -> env = env, res = {})
#endif
^ storeGrp(
       code == {Instr}, env == {PC depth}, addr == [-SP], val == {}, mem == _ // TODO: Really anything? There is probably a bug here [-Instr]?
    -> env = env, mem = {Stack depth})  // TODO: Probably wrong!!
^ jalrGrp(
       code == {Instr}, target == {}, env == {(PC _)}, return == {}
    -> env = env, return = {} )
// TODO: Other jals, blt
// TODO: ... and we need some more clauses for other groups pretty soon :-)

// ==============================================================================
// ==============================================================================
// map external names (dotted strings) to tag sets
// (Adding these explicit "heap."s is just a workaround pending a proper fix to PIPE.hs)

// Not sure whether we need these at all any more...?
//require:
//    init test.Boring {stack.Boring}
//    init test.Stack {stack.Stack}
//    init test.PC {stack.PC}
//    init test.SP {stack.SP}
//    init test.H1 {stack.H1}
//    init test.H2 {stack.H2}
//    init test.H3 {stack.H3}
//    init test.R1 {stack.R1}
//    init test.R2 {stack.R2}
//    init test.R3 {stack.R3}

group:
    grp jalGrp(-> RD:return)
        jal

    grp jalrGrp(RS1:target -> RD:return)
        jalr

    grp branchGrp(RS1:op1, RS2:op2 -> )
        beq
        bne
        blt
        bge
        bltu
        bgeu

    grp loadGrp(RS1:addr, MEM:mem -> RD:res)
        lb
        lh
        lw
        lbu
        lhu

    grp loadUpperGrp(-> RD:dest)
        lui
        auipc

    grp storeGrp(RS1:addr, RS2:val, MEM:mem -> MEM:mem)
        sb
        sh
        sw

    grp immArithGrp(RS1:op1 -> RD:res)
        addi
        slti
        sltiu
        xori
        ori
        andi
        slli
        srli
        srai

    grp arithGrp(RS1:op1, RS2:op2 -> RD:res)
        add
        sub
        sll
        slt
        sltu
        xor
        srl
        sra
        or
        and

    grp systemGrp( -> )
        fence

    grp privGrp( -> )
        ecall
        ebreak
